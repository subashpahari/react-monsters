{"version":3,"sources":["components/card/Card.jsx","components/card-list/CardList.jsx","components/search/Search.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","data","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mTAgBeA,MAbf,SAAcC,GACV,OACE,sBAAKC,UAAU,iBAAf,UACE,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aACHC,IAAI,WAEN,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCGXC,MAVf,SAAkBR,GACd,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,U,MCOdO,MAZf,YAA8C,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aAC5B,OACE,qBAAKZ,UAAU,SAAf,SACE,uBACEa,KAAK,SACLF,YAAaA,EACbG,SAAUF,OCgCHG,E,kDAnCb,aAAe,IAAD,8BACZ,gBAeFH,aAAe,SAAAI,GAChB,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAfnC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAc,IAJJ,E,qDAOd,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAUA,EAAKC,UACpBF,MAAK,SAACG,GAAD,OACJ,EAAKT,SAAS,CACZT,SAAUkB,S,oBAOlB,WACE,MAA8BC,KAAKN,MAA5Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXU,EAAmBpB,EAASqB,QAAO,SAAA3B,GAAO,OAAEA,EAAQG,KAAKyB,cAAcC,SAASb,EAAYY,kBAClG,OACE,sBAAK9B,UAAU,MAAf,UACA,uDACE,cAAC,EAAD,CACEW,YAAa,iBACbC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA9BVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.59c3d84d.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./card.styles.css\";\r\n\r\nfunction Card(props) {\r\n    return (\r\n      <div className=\"card-container\">\r\n        <img\r\n          src={`https://robohash.org/${props.monster.id}?set=set2`}\r\n          alt=\"AVATAR\"\r\n        />\r\n        <h1>{props.monster.name}</h1>\r\n        <p>{props.monster.email}</p>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport \"./card-list.css\";\r\nimport Card from '../card/Card';\r\n\r\nfunction CardList(props) {\r\n    return (\r\n      <div className=\"card-list\">\r\n        {props.monsters.map((monster) => (\r\n          <Card key={monster.id} monster={monster}></Card>\r\n        ))}\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default CardList\r\n","import React from \"react\";\r\nimport \"./search-box.styles.css\"\r\n\r\nfunction Search({placeholder, handleChange}) {\r\n  return (\r\n    <div className=\"search\">\r\n      <input\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Search;\r\n","import { Component } from \"react\";\nimport \"./App.css\";\nimport CardList from \"./components/card-list/CardList\";\nimport Search from \"./components/search/Search\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField : '',\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((data) => data.json())\n      .then((users) =>\n        this.setState({\n          monsters: users,\n        })\n      );\n  }\n  handleChange = e =>{\n this.setState({ searchField: e.target.value })\n  }\n  render() {\n    const {monsters, searchField}=this.state;\n    const filteredMonsters = monsters.filter(monster=>monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    return (\n      <div className=\"App\">\n      <h1>MONSTER CARD SELECTOR</h1>\n        <Search\n          placeholder={'Search keyword'}\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}